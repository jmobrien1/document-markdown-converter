# app/main/routes.py
# Enhanced with freemium logic and anonymous usage tracking

import os
import uuid
from google.cloud import storage
from google.api_core import exceptions as google_exceptions
from flask import (
    Blueprint, render_template, request, jsonify, url_for, current_app, session
)
from werkzeug.utils import secure_filename
from app.tasks import convert_file_task
from flask_login import login_required, current_user
from ..models import User, AnonymousUsage, Conversion
from .. import db

main = Blueprint('main', __name__)

def allowed_file(filename):
    """Check if the file's extension is in the allowed set."""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in current_app.config['ALLOWED_EXTENSIONS']

def check_conversion_limits():
    """Check if user/session can perform conversions."""
    if current_user.is_authenticated:
        # Logged-in users have unlimited conversions
        return True, None
    
    # Check anonymous user limits
    session_id = session.get('session_id')
    if not session_id:
        session_id = str(uuid.uuid4())
        session['session_id'] = session_id
    
    usage = AnonymousUsage.get_or_create_session(session_id, request.remote_addr)
    daily_limit = current_app.config.get('ANONYMOUS_DAILY_LIMIT', 5)
    
    if not usage.can_convert(daily_limit):
        return False, f"Daily limit reached. Anonymous users can convert {daily_limit} files per day. Please sign up for unlimited conversions."
    
    return True, None

@main.route('/')
def index():
    """Renders the main page with the file upload form."""
    # Get usage info for anonymous users
    if not current_user.is_authenticated:
        session_id = session.get('session_id')
        if not session_id:
            session_id = str(uuid.uuid4())
            session['session_id'] = session_id
        
        usage = AnonymousUsage.get_or_create_session(session_id, request.remote_addr)
        daily_limit = current_app.config.get('ANONYMOUS_DAILY_LIMIT', 5)
        remaining_conversions = max(0, daily_limit - usage.conversions_today)
    else:
        remaining_conversions = None  # Unlimited for logged-in users
    
    return render_template('index.html', 
                         remaining_conversions=remaining_conversions,
                         daily_limit=current_app.config.get('ANONYMOUS_DAILY_LIMIT', 5))

@main.route('/convert', methods=['POST'])
def convert():
    """
    Handles file upload, checks for pro conversion flag, and starts the task.
    Now supports both authenticated and anonymous users with rate limiting.
    """
    if 'file' not in request.files:
        return jsonify({'error': 'No file part in the request'}), 400
    
    file = request.files['file']
    
    if file.filename == '' or not allowed_file(file.filename):
        return jsonify({'error': 'Invalid or no selected file'}), 400

    # Check conversion limits
    can_convert, limit_error = check_conversion_limits()
    if not can_convert:
        return jsonify({'error': limit_error}), 429

    filename = secure_filename(file.filename)
    blob_name = f"uploads/{uuid.uuid4()}_{filename}"
    bucket_name = current_app.config['GCS_BUCKET_NAME']

    # Check if the user requested a pro conversion
    use_pro_converter = request.form.get('pro_conversion') == 'on'
    
    # --- ADDED FOR DEBUGGING ---
    current_app.logger.info(f"'/convert' route called. Pro conversion requested: {use_pro_converter}")
    
    try:
        storage_client = storage.Client()
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(blob_name)
        blob.upload_from_file(file)
    except Exception as e:
        current_app.logger.error(f"GCS Upload Failed: {e}")
        return jsonify({'error': 'Could not upload file to cloud storage.'}), 500

    # Create conversion record
    user_id = current_user.id if current_user.is_authenticated else None
    session_id = session.get('session_id') if not current_user.is_authenticated else None
    
    conversion = Conversion(
        user_id=user_id,
        session_id=session_id,
        original_filename=filename,
        file_size=len(file.read()),
        file_type=os.path.splitext(filename)[1].lower(),
        conversion_type='pro' if use_pro_converter else 'standard',
        status='pending'
    )
    file.seek(0)  # Reset file pointer after reading size
    db.session.add(conversion)
    db.session.commit()

    # Update anonymous usage
    if not current_user.is_authenticated:
        usage = AnonymousUsage.get_or_create_session(session_id, request.remote_addr)
        usage.increment_usage()

    # Pass the pro converter flag to the Celery task
    task = convert_file_task.delay(
        bucket_name,
        blob_name,
        filename,
        use_pro_converter,
        conversion.id  # Pass conversion ID to update status
    )

    return jsonify({
        'job_id': task.id,
        'conversion_id': conversion.id,
        'status_url': url_for('main.task_status', job_id=task.id)
    }), 202

@main.route('/status/<job_id>')
def task_status(job_id):
    """
    Endpoint for the client to poll for the status of a background task.
    """
    task = convert_file_task.AsyncResult(job_id)
    
    if task.state == 'PENDING':
        response = {'state': task.state, 'status': 'Pending...'}
    elif task.state == 'PROGRESS':
        response = {'state': task.state, 'status': task.info.get('status', 'Processing...')}
    elif task.state == 'SUCCESS':
        response = {'state': 'SUCCESS', 'result': task.info}
    else: # 'FAILURE'
        response = {
            'state': 'FAILURE',
            'status': str(task.info),
            'error': task.info.get('error', 'An unknown error occurred.')
        }
        
    return jsonify(response)

@main.route('/stats')
def conversion_stats():
    """Get conversion statistics."""
    try:
        if current_user.is_authenticated:
            # User-specific stats
            total_conversions = current_user.conversions.count()
            daily_conversions = current_user.get_daily_conversions()
            successful_conversions = current_user.conversions.filter_by(status='completed').count()
            
            # Calculate success rate
            success_rate = (successful_conversions / total_conversions * 100) if total_conversions > 0 else 0
            
            return jsonify({
                'authenticated': True,
                'total_conversions': total_conversions,
                'daily_conversions': daily_conversions,
                'successful_conversions': successful_conversions,
                'success_rate': round(success_rate, 1),
                'can_convert': True
            })
        else:
            # Anonymous user stats
            session_id = session.get('session_id')
            if session_id:
                usage = AnonymousUsage.query.filter_by(session_id=session_id).first()
                if usage:
                    daily_limit = current_app.config.get('ANONYMOUS_DAILY_LIMIT', 5)
                    remaining = max(0, daily_limit - usage.conversions_today)
                    return jsonify({
                        'authenticated': False,
                        'daily_conversions': usage.conversions_today,
                        'daily_limit': daily_limit,
                        'remaining_conversions': remaining,
                        'can_convert': usage.can_convert()
                    })
            
            daily_limit = current_app.config.get('ANONYMOUS_DAILY_LIMIT', 5)
            return jsonify({
                'authenticated': False,
                'daily_conversions': 0,
                'daily_limit': daily_limit,
                'remaining_conversions': daily_limit,
                'can_convert': True
            })
            
    except Exception as e:
        current_app.logger.error(f"Error getting stats: {str(e)}")
        return jsonify({'error': 'Error retrieving statistics'}), 500

@main.app_errorhandler(413)
def request_entity_too_large(e):
    """Custom error handler for 413 Request Entity Too Large."""
    max_size_mb = current_app.config['MAX_CONTENT_LENGTH'] / 1024 / 1024
    return jsonify(error=f"File is too large. Maximum size is {max_size_mb:.0f}MB."), 413