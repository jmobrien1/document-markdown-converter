# app/auth/routes.py
# Enhanced with user dashboard and account management

import re
from flask import render_template, redirect, request, url_for, flash, jsonify, session
from flask_login import login_user, logout_user, login_required, current_user
from . import auth
from .. import db
from ..models import User, AnonymousUsage, Conversion

def is_valid_email(email):
    """Validate email format."""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

@auth.route('/signup', methods=['GET', 'POST'])
def signup():
    """User registration endpoint."""
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    
    if request.method == 'POST':
        email = request.form.get('email', '').strip().lower()
        password = request.form.get('password', '')
        
        # Validation
        errors = []
        
        if not email:
            errors.append('Email is required')
        elif not is_valid_email(email):
            errors.append('Please enter a valid email address')
        
        if not password:
            errors.append('Password is required')
        elif len(password) < 6:
            errors.append('Password must be at least 6 characters long')
        
        # Check if user already exists
        if email and User.query.filter_by(email=email).first():
            errors.append('Email address already registered')
        
        if errors:
            for error in errors:
                flash(error, 'error')
            return render_template('signup.html')
        
        try:
            # Create new user
            user = User(email=email)
            user.password = password  # Uses the setter
            
            db.session.add(user)
            db.session.commit()
            
            # Log the user in
            login_user(user, remember=True)
            flash('Account created successfully! Welcome to mdraft.', 'success')
            return redirect(url_for('main.index'))
                
        except Exception as e:
            db.session.rollback()
            flash('An error occurred creating your account. Please try again.', 'error')
            return render_template('signup.html')
    
    return render_template('signup.html')


@auth.route('/login', methods=['GET', 'POST'])
def login():
    """User login endpoint."""
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    
    if request.method == 'POST':
        email = request.form.get('email', '').strip().lower()
        password = request.form.get('password', '')
        remember = bool(request.form.get('remember'))
        
        # Validation
        if not email or not password:
            flash('Email and password are required', 'error')
            return render_template('login.html')
        
        # Find user and verify password
        user = User.query.filter_by(email=email).first()
        
        if not user or not user.verify_password(password):
            flash('Invalid email or password', 'error')
            return render_template('login.html')
        
        if not user.is_active:
            flash('Account is disabled', 'error')
            return render_template('login.html')
        
        # Login successful
        login_user(user, remember=remember)
        flash(f'Welcome back, {user.email}!', 'success')
        
        # Redirect to next page or home
        next_page = request.args.get('next')
        if next_page:
            return redirect(next_page)
        return redirect(url_for('main.index'))
    
    return render_template('login.html')


@auth.route('/logout')
@login_required
def logout():
    """User logout endpoint."""
    user_email = current_user.email
    logout_user()
    flash(f'Goodbye, {user_email}!', 'info')
    return redirect(url_for('main.index'))


@auth.route('/account')
@login_required
def account():
    """User account dashboard."""
    # Get user statistics
    total_conversions = current_user.conversions.count()
    daily_conversions = current_user.get_daily_conversions()
    
    # Get recent conversions
    recent_conversions = current_user.conversions.order_by(
        Conversion.created_at.desc()
    ).limit(10).all()
    
    # Calculate success rate
    successful_conversions = current_user.conversions.filter_by(status='completed').count()
    success_rate = (successful_conversions / total_conversions * 100) if total_conversions > 0 else 0
    
    return render_template('auth/account.html', 
                         user=current_user,
                         total_conversions=total_conversions,
                         daily_conversions=daily_conversions,
                         recent_conversions=recent_conversions,
                         success_rate=round(success_rate, 1))


@auth.route('/user-status')
def user_status():
    """API endpoint to get current user status."""
    if current_user.is_authenticated:
        # Get user's conversion stats
        daily_conversions = current_user.get_daily_conversions()
        total_conversions = current_user.conversions.count()
        
        return jsonify({
            'authenticated': True,
            'email': current_user.email,
            'is_premium': current_user.is_premium,
            'daily_conversions': daily_conversions,
            'total_conversions': total_conversions,
            'can_convert': current_user.can_convert()
        })
    else:
        # Anonymous user status
        session_id = session.get('session_id')
        if session_id:
            usage = AnonymousUsage.query.filter_by(session_id=session_id).first()
            if usage:
                return jsonify({
                    'authenticated': False,
                    'daily_conversions': usage.conversions_today,
                    'daily_limit': 5,
                    'can_convert': usage.can_convert(),
                    'remaining': max(0, 5 - usage.conversions_today)
                })
        
        return jsonify({
            'authenticated': False,
            'daily_conversions': 0,
            'daily_limit': 5,
            'can_convert': True,
            'remaining': 5
        })


# Placeholder routes for future premium features
@auth.route('/upgrade')
@login_required
def upgrade():
    """Upgrade to premium page (placeholder for Stripe integration)."""
    return render_template('auth/upgrade.html')


@auth.route('/billing')
@login_required
def billing():
    """Billing management page (placeholder for Stripe integration)."""
    if not current_user.is_premium:
        return redirect(url_for('auth.upgrade'))
    
    return render_template('auth/billing.html')