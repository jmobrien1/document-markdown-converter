services:
  # A Redis instance for our Celery queue
  - type: redis
    name: redis-mdraft
    plan: free
    ipAllowList: [] # Allow all, or specify IPs if needed
    maxmemoryPolicy: allkeys-lru

  # The main Flask web application
  - type: web
    name: mdraft-web
    env: docker
    dockerfilePath: ./Dockerfile.render
    plan: free
    # Install web dependencies with cache busting
    buildCommand: "echo 'WEB-CACHE-BUST-$(date +%s)' && pip install --no-cache-dir -r requirements-web.txt"
    startCommand: "flask db upgrade && flask migrate-stripe && gunicorn run:app"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.9
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

  # The Celery background worker
  - type: worker
    name: mdraft-worker
    env: docker
    dockerfilePath: ./Dockerfile.render
    plan: free
    # Install worker dependencies with cache busting
    buildCommand: "echo 'WORKER-CACHE-BUST-$(date +%s)' && pip install --no-cache-dir -r requirements-worker.txt"
    startCommand: "celery -A celery_worker.celery worker --loglevel=info --pool=threads --concurrency=4 --without-gossip --without-mingle"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.9
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

envVarGroups:
  - name: mdraft-secrets
    envVars:
      - key: SECRET_KEY
        generateValue: true # Let Render generate a secure secret key
      - key: GCS_BUCKET_NAME
        value: mdraft-uploads-1974 # <-- PASTE YOUR BUCKET NAME
      - key: GOOGLE_APPLICATION_CREDENTIALS
        value: /etc/secrets/gcs-credentials.json # Path on Render's server
      - key: DOCAI_PROCESSOR_ID
        value: mdraft-processor # <-- PASTE YOUR PROCESSOR ID