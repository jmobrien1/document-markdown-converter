services:
  # A Redis instance for our Celery queue
  - type: redis
    name: redis-mdraft
    plan: free
    ipAllowList: [] # Allow all, or specify IPs if needed
    maxmemoryPolicy: allkeys-lru

  # The main Flask web application
  - type: web
    name: mdraft-web
    env: docker
    dockerfilePath: ./Dockerfile.render
    plan: free
    # Install web dependencies with aggressive cache busting
    buildCommand: "echo 'RENDER-COMPLETE-REBUILD-$(date +%s)-$(uuidgen)-$(echo $RANDOM)-$(echo $BUILD_ID)' && rm -rf ~/.cache/pip && pip cache purge && rm -rf /tmp/* && find . -name '*.pyc' -delete && find . -name '__pycache__' -type d -exec rm -rf {} + && docker system prune -f && pip install --no-cache-dir --force-reinstall -r requirements-web.txt && echo 'Build completed at $(date)' && echo 'Pure bcrypt migration completed'"
    startCommand: "echo 'Starting database migration...' && echo 'Current migration state:' && flask db current && echo 'Running migrations...' && flask db upgrade && echo 'Running job_id column fix...' && flask fix-job-id-column && echo 'Migration complete, starting web server...' && echo 'Pure bcrypt migration version: $(date +%s)' && echo 'Verifying User model has verify_password method...' && python -c \"from app.models import User; print('✅ User model verify_password method exists:', hasattr(User, 'verify_password'))\" && echo 'Verifying pure bcrypt is available...' && python -c \"import bcrypt; print('✅ Pure bcrypt available:', bcrypt is not None)\" && echo 'Testing bcrypt functionality...' && python -c \"import bcrypt; salt = bcrypt.gensalt(); hashed = bcrypt.hashpw(b'test', salt); print('✅ Bcrypt test successful:', bcrypt.checkpw(b'test', hashed))\" && echo 'Verifying job_id column exists...' && python -c \"from app import db; from app.models import Conversion; result = db.session.execute('SELECT column_name FROM information_schema.columns WHERE table_name = \\'conversions\\' AND column_name = \\'job_id\\''); print('✅ job_id column exists:', result.fetchone() is not None)\" && gunicorn run:app"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.9
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: FORCE_REBUILD
        value: "true"
      - key: BCRYPT_MIGRATION
        value: "pure_bcrypt_v1"
      - key: DATABASE_MIGRATION
        value: "job_id_column_fix_v1"
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

  # The Celery background worker
  - type: worker
    name: mdraft-worker
    env: docker
    dockerfilePath: ./Dockerfile.render
    plan: free
    # Install worker dependencies with aggressive cache busting
    buildCommand: "echo 'WORKER-AGGRESSIVE-CACHE-BUST-$(date +%s)-$(uuidgen)' && rm -rf ~/.cache/pip && pip cache purge && pip install --no-cache-dir --force-reinstall -r requirements-worker.txt"
    startCommand: "echo 'WORKER-START-COMMAND-EXECUTED' && celery -A celery_worker.celery worker --loglevel=info --pool=threads --concurrency=4 --without-gossip --without-mingle"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.9
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: FORCE_REBUILD
        value: "true"
      - key: BCRYPT_MIGRATION
        value: "pure_bcrypt_v1"
      - key: DATABASE_MIGRATION
        value: "job_id_column_fix_v1"
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

  # Cron job for expiring trials
  - type: cron
    name: expire-trials
    env: python
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: python expire_trials_direct.py
    schedule: "0 0 * * *"  # Daily at midnight UTC
    envVars:
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

  # Cron job for resetting monthly usage
  - type: cron
    name: reset-monthly-usage
    env: python
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: python reset_monthly_usage_direct.py
    schedule: "0 0 1 * *"  # First day of every month at midnight UTC
    envVars:
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

  # Cron job for Redis health check (keeps Redis active)
  - type: cron
    name: redis-health-check
    env: python
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: python redis_health_check_direct.py
    schedule: "*/30 * * * *"  # Every 30 minutes
    envVars:
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

envVarGroups:
  - name: mdraft-secrets
    envVars:
      - key: SECRET_KEY
        generateValue: true # Let Render generate a secure secret key
      - key: GCS_BUCKET_NAME
        value: mdraft-uploads-1974 # <-- PASTE YOUR BUCKET NAME
      - key: GOOGLE_APPLICATION_CREDENTIALS
        value: /etc/secrets/gcs-credentials.json # Path on Render's server
      - key: DOCAI_PROCESSOR_ID
        value: mdraft-processor # <-- PASTE YOUR PROCESSOR ID