services:
  # A Redis instance for our Celery queue
  - type: redis
    name: redis-mdraft
    plan: starter
    ipAllowList: [] # Allow all, or specify IPs if needed
    maxmemoryPolicy: allkeys-lru

  # The main Flask web application
  - type: web
    name: mdraft-app
    env: python
    plan: starter
    dockerfilePath: ./Dockerfile.render
    dockerContext: .
    # Force complete cache invalidation - 2025-08-05
    buildCommand: docker build --no-cache --pull --force-rm -f Dockerfile.render -t mdraft-app . --build-arg TIMESTAMP=$(date +%s) --build-arg CACHE_BUSTER=$(openssl rand -hex 16)
    startCommand: mkdir -p /var/data/annoy_indices && chmod -R 777 /var/data/annoy_indices && flask db upgrade && gunicorn run:app
    envVars:
      - key: FLASK_ENV
        value: production
      - key: SECRET_KEY
        generateValue: true
      - key: DATABASE_URL
        fromDatabase:
          name: mdraft-db
          property: connectionString
      - key: GCS_BUCKET_NAME
        value: mdraft-storage
      - key: GCS_CREDENTIALS_JSON
        sync: false
      - key: DOCAI_PROCESSOR_ID
        value: projects/your-project/locations/us/processors/your-processor-id
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      - key: MAIL_SERVER
        value: smtp.gmail.com
      - key: MAIL_PORT
        value: 587
      - key: MAIL_USE_TLS
        value: true
      - key: MAIL_USERNAME
        sync: false
      - key: MAIL_PASSWORD
        sync: false
      # OpenAI API for LLM features
      - key: OPENAI_API_KEY
        sync: false
      # RAG Feature Environment Variables
      - key: ENABLE_RAG
        value: true
      - key: RAG_MODEL
        value: all-MiniLM-L6-v2
      - key: RAG_MAX_TOKENS
        value: 500
      - key: RAG_CHUNK_OVERLAP
        value: 50
      # RAG Index Persistence Configuration
      - key: ANNOY_INDEX_PATH
        value: /var/data/annoy_indices/index.ann

  # The Celery background worker
  - type: worker
    name: mdraft-worker
    env: python
    plan: starter
    dockerfilePath: ./Dockerfile.render
    dockerContext: .
    buildCommand: docker build --no-cache --pull --force-rm -f Dockerfile.render -t mdraft-worker . --build-arg TIMESTAMP=$(date +%s) --build-arg CACHE_BUSTER=$(openssl rand -hex 16)
    startCommand: mkdir -p /var/data/annoy_indices && chmod -R 777 /var/data/annoy_indices && celery -A celery_worker.celery worker --loglevel=info
    envVars:
      - key: FLASK_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: mdraft-db
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: GCS_BUCKET_NAME
        value: mdraft-storage
      - key: GCS_CREDENTIALS_JSON
        sync: false
      - key: DOCAI_PROCESSOR_ID
        value: projects/your-project/locations/us/processors/your-processor-id
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: MAIL_USERNAME
        sync: false
      - key: MAIL_PASSWORD
        sync: false
      # OpenAI API for LLM features
      - key: OPENAI_API_KEY
        sync: false
      # RAG Feature Environment Variables
      - key: ENABLE_RAG
        value: true
      - key: RAG_MODEL
        value: all-MiniLM-L6-v2
      - key: RAG_MAX_TOKENS
        value: 500
      - key: RAG_CHUNK_OVERLAP
        value: 50
      # RAG Index Persistence Configuration
      - key: ANNOY_INDEX_PATH
        value: /var/data/annoy_indices/index.ann

  # Cron job for expiring trials
  - type: cron
    name: expire-trials
    env: python
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: celery -A celery_worker.celery call app.tasks.expire_trials
    schedule: "0 0 * * *"  # Daily at midnight UTC
    envVars:
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

  # Cron job for resetting monthly usage
  - type: cron
    name: reset-monthly-usage
    env: python
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: celery -A celery_worker.celery call app.tasks.reset_monthly_usage
    schedule: "0 0 1 * *"  # First day of every month at midnight UTC
    envVars:
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

  # Health check cron job - reduced frequency to prevent Redis connection exhaustion
  - type: cron
    name: redis-health-check
    env: python
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: python -c "import redis; r = redis.Redis.from_url('${{services.redis-mdraft.envVars.REDIS_URL}}'); print('Redis connection:', r.ping())"
    schedule: "0 */4 * * *"  # Every 4 hours instead of every 2 hours
    envVars:
      - key: FLASK_APP
        value: run.py
      - key: FLASK_CONFIG
        value: production
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis-mdraft
          property: connectionString
      - fromGroup: mdraft-secrets

envVarGroups:
  - name: mdraft-secrets
    envVars:
      - key: SECRET_KEY
        generateValue: true # Let Render generate a secure secret key
      - key: GCS_BUCKET_NAME
        value: mdraft-uploads-1974 # <-- PASTE YOUR BUCKET NAME
      - key: GOOGLE_APPLICATION_CREDENTIALS
        value: /etc/secrets/gcs-credentials.json # Path on Render's server
      - key: DOCAI_PROCESSOR_ID
        value: mdraft-processor # <-- PASTE YOUR PROCESSOR ID